@page "/People"


<h1>Demo Person Project</h1>


<table class="table" style="background:#05163D;color:honeydew; width:100%;">
    <tr>
        <td style="width:20px;"> </td>
        <td>
            <h2> Add New Person </h2>
        </td>
        <td> </td>
       
        <td align="right">
            <button class="btn btn-info" @onclick="(async () => await AddNewPerson())">Clear</button>
        </td>
        <td width="10"> </td>
    </tr>
    <tr>
        <td colspan="5"></td>
    </tr>
</table>
<div class="container">
    <div class="row">

        <div class="col-6">

            <form>
                <div class="form-group">
                    <label for="email">Person  Id</label>

                    <input type="text" class="form-control" @bind="PersonG.Id" readonly />
                </div>
                <div class="form-group">
                    <label for="Person">Name:</label>

                    <input type="text" class="form-control" @bind="PersonG.Name" placeholder="Person Name" />
                </div>

                <div class="form-group">
                    <label for="pwd">	Age:</label>
                    <input type="text" class="form-control" @bind="PersonG.Age" placeholder="Age" />
                </div>


                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input type="checkbox" @bind="PersonG.Visible" class="form-check-input" />Make It Visible ?

                    </label>
                </div>

                <div class="form-group" hidden>
                    <label for="IsVisible">IsVisible</label>

                    <input type="text" class="form-control" bind="@PersonG.Visible.ToString()" value="@PersonG.Visible.ToString()" readonly />
                </div>


                <button type="button" class="btn btn-success" @onclick="@(()=> AddPerson())" style="width:220px;">Save</button>



            </form>
        </div>
    </div>
</div>

<br />

<table class="table" style="background:#05163D;color:honeydew; width:100%;;">
    <tr>
        <td style="width:20px;"></td>
        <td>
            <h2>Blood Details</h2>
        </td>
    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>

@if (Person == null)
{
    <p><em>Loafing.....</em></p>
}
else
{
    <table class="table" style="background:#05163D;color:honeydew; width:100%;">
        <thead  style="background-color:black; color:white;">
            <tr>
                <th>Person Id</th>
                <th>Person Name</th>
                <th>Person Age</th>
                <th>Person Time</th>
                <th>Visible</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var _person in Person)
            {
            <tr>
                <td>@_person.Id</td>
                <td>@_person.Name</td>
                <td>@_person.Age</td>
                <td>@_person.Urd</td>
                <td>@_person.Visible</td>
                <td>
                    <button class="btn btn-info" @onclick="@(()=>EditPerson(_person.Id))">Edit</button> |
                    <button class="btn btn-danger" @onclick="@(() => DeletePerson(_person.Id))">Delete</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    Person[] Person;

    Person PersonG = new Person();

    string ids = "0";
    bool showAddrow = false;
    protected override async Task OnInitializedAsync()
    {
        Person = await Http.GetJsonAsync<Person[]>("/api/People/");
    }

    async Task  AddNewPerson()
    {
        PersonG = new Person();

    }

    async Task AddPerson()
    {
        PersonG.Urd = DateTime.Now.ToUniversalTime().ToString();

        if (PersonG.Id == 0)
        {
            await Http.PostJsonAsync("/api/People/", PersonG);
        }
        else
        {
            await Http.PutJsonAsync($"/api/People/{PersonG.Id}", PersonG);
        }

        PersonG = new Person();
        Person = await Http.GetJsonAsync<Person[]>("api/people");
    }

    async Task EditPerson(int id)
    {
        ids = id.ToString();

        PersonG = await Http.GetJsonAsync<Person>($"/api/People/{id}");
    }

    async Task DeletePerson(int id)
    {
       
        var SelectPerson = $"Would you like delete this {Person.First(p => p.Id == id).Name} ?  ";
          
        ids = id.ToString();

        if (await JS.InvokeAsync<bool>("confirm", SelectPerson))
        {

          await Http.DeleteAsync($"/api/People/{id}");

        }


        Person = await Http.GetJsonAsync<Person[]>("/api/People/");
    }

}
